import telebot
from telebot import types
import sqlite3
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = '7282657185:AAELl9sSiawKcC_MsrssuvGD9dmztiZoj1k'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
ADMIN_ID = 1200223081  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID

bot = telebot.TeleBot(BOT_TOKEN)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('uc_bot.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
cursor.execute('''
CREATE TABLE IF NOT EXISTS uc_codes (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    code TEXT NOT NULL,
    uc_amount INTEGER NOT NULL
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS transactions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    uc_amount INTEGER NOT NULL,
    payment_method TEXT NOT NULL,
    screenshot TEXT,
    status TEXT DEFAULT 'pending'
)
''')
conn.commit()

# –ö–æ–º–∞–Ω–¥–∞ /start —Å —Ñ–æ—Ç–æ –∏ –º–µ–Ω—é
@bot.message_handler(commands=['start'])
def start(message):
    with open('navigation_photo.jpg', 'rb') as photo:
        bot.send_photo(message.chat.id, photo, caption="–î–æ–±—Ä—ã–π –¥–µ–Ω—å! üéâ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=generate_main_menu())

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def generate_main_menu():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü–†–û–§–ò–õ–¨ üëë", callback_data='profile'))
    markup.add(types.InlineKeyboardButton("–ö–£–ü–ò–¢–¨ UC üî•", callback_data='buy_uc'))
    markup.add(types.InlineKeyboardButton("–°–¢–ê–¢–ò–°–¢–ò–ö–ê üìà", callback_data='statistics'))
    markup.add(types.InlineKeyboardButton("–†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê üéÅ", callback_data='referral'))
    markup.add(types.InlineKeyboardButton("–¢–ï–•. –ü–û–î–î... ‚òéÔ∏è", callback_data='support'))
    markup.add(types.InlineKeyboardButton("–û–¢–ó–´–í–´ üå±", callback_data='reviews'))
    return markup

# –í—ã–±–æ—Ä "–ö—É–ø–∏—Ç—å UC"
@bot.callback_query_handler(func=lambda call: call.data == 'buy_uc')
def buy_uc(call):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("60 UC", callback_data='uc_60'))
    markup.add(types.InlineKeyboardButton("325 UC", callback_data='uc_325'))
    markup.add(types.InlineKeyboardButton("660 UC", callback_data='uc_660'))
    markup.add(types.InlineKeyboardButton("1800 UC", callback_data='uc_1800'))
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ UC:", reply_markup=markup)

# –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ UC
@bot.callback_query_handler(func=lambda call: call.data.startswith('uc_'))
def select_payment_method(call):
    uc_amount = int(call.data.split('_')[1])
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–°–±–µ—Ä–±–∞–Ω–∫", callback_data=f'pay_sber_{uc_amount}'))
    markup.add(types.InlineKeyboardButton("–¢–∏–Ω—å–∫–æ—Ñ—Ñ", callback_data=f'pay_tinkoff_{uc_amount}'))
    markup.add(types.InlineKeyboardButton("–û–∑–æ–Ω –ë–∞–Ω–∫", callback_data=f'pay_ozon_{uc_amount}'))
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=markup)

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ
@bot.callback_query_handler(func=lambda call: call.data.startswith('pay_'))
def instruct_payment(call):
    parts = call.data.split('_')
    payment_method = parts[1]
    uc_amount = int(parts[2])
    payment_details = {
        'sber': '–†–µ–∫–≤–∏–∑–∏—Ç—ã –°–±–µ—Ä–±–∞–Ω–∫–∞: [—É–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã]',
        'tinkoff': '–†–µ–∫–≤–∏–∑–∏—Ç—ã –¢–∏–Ω—å–∫–æ—Ñ—Ñ: [—É–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã]',
        'ozon': '–†–µ–∫–≤–∏–∑–∏—Ç—ã –û–∑–æ–Ω –ë–∞–Ω–∫–∞: [—É–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã]'
    }
    bot.send_message(call.message.chat.id, f"–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º:\n{payment_details[payment_method]}\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç.")
    cursor.execute('INSERT INTO transactions (user_id, uc_amount, payment_method) VALUES (?, ?, ?)', (call.from_user.id, uc_amount, payment_method))
    conn.commit()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
@bot.message_handler(content_types=['photo'])
def handle_screenshot(message):
    cursor.execute('SELECT id FROM transactions WHERE user_id = ? AND status = "pending" ORDER BY id DESC LIMIT 1', (message.from_user.id,))
    transaction = cursor.fetchone()
    if transaction:
        transaction_id = transaction[0]
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        screenshot_path = f'screenshots/{transaction_id}.jpg'
        with open(screenshot_path, 'wb') as new_file:
            new_file.write(downloaded_file)
        cursor.execute('UPDATE transactions SET screenshot = ? WHERE id = ?', (screenshot_path, transaction_id))
        conn.commit()
        bot.send_message(message.chat.id, "–°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.")

# –ê–¥–º–∏–Ω: –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–¥–æ–≤
@bot.message_handler(commands=['upload_codes'])
def upload_codes(message):
    if message.from_user.id == ADMIN_ID:
        parts = message.text.split()
        if len(parts) < 3:
            bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /upload_codes <uc_amount> <code1> <code2> ...")
            return
        uc_amount = int(parts[1])
        codes = parts[2:]
        for code in codes:
            cursor.execute('INSERT INTO uc_codes (code, uc_amount) VALUES (?, ?)', (code, uc_amount))
        conn.commit()
        bot.send_message(message.chat.id, f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(codes)} –∫–æ–¥–æ–≤ –¥–ª—è {uc_amount} UC.")
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–¥–æ–≤.")

# –ê–¥–º–∏–Ω: –ø—Ä–æ—Å–º–æ—Ç—Ä –æ–∂–∏–¥–∞—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
@bot.message_handler(commands=['pending_transactions'])
def pending_transactions(message):
    if message.from_user.id == ADMIN_ID:
        cursor.execute('SELECT id, user_id, uc_amount, payment_method, screenshot FROM transactions WHERE status = "pending"')
        transactions = cursor.fetchall()
        if not transactions:
            bot.send_message(message.chat.id, "–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.")
            return
        for trans in transactions:
            trans_id, user_id, uc_amount, payment_method, screenshot = trans
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f'confirm_{trans_id}'))
            markup.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f'cancel_{trans_id}'))
            msg = f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {trans_id}: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, {uc_amount} UC, {payment_method}"
            if screenshot:
                with open(screenshot, 'rb') as photo:
                    bot.send_photo(message.chat.id, photo, caption=msg, reply_markup=markup)
            else:
                bot.send_message(message.chat.id, msg, reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")

# –ê–¥–º–∏–Ω: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_') or call.data.startswith('cancel_'))
def handle_transaction_action(call):
    if call.from_user.id == ADMIN_ID:
        action, trans_id = call.data.split('_')
        trans_id = int(trans_id)
        cursor.execute('SELECT user_id, uc_amount FROM transactions WHERE id = ?', (trans_id,))
        trans_data = cursor.fetchone()
        if not trans_data:
            bot.send_message(call.message.chat.id, "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        user_id, uc_amount = trans_data

        if action == 'confirm':
            cursor.execute('SELECT code FROM uc_codes WHERE uc_amount = ? LIMIT 1', (uc_amount,))
            code = cursor.fetchone()
            if code:
                code = code[0]
                bot.send_message(user_id, f"–í–∞—à –∫–æ–¥ –¥–ª—è {uc_amount} UC: {code}\n–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –µ–≥–æ –Ω–∞ —Å–∞–π—Ç–µ –∏–≥—Ä—ã.")
                cursor.execute('DELETE FROM uc_codes WHERE code = ?', (code,))
                cursor.execute('UPDATE transactions SET status = "confirmed" WHERE id = ?', (trans_id,))
            else:
                bot.send_message(call.message.chat.id, f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–¥–æ–≤ –¥–ª—è {uc_amount} UC.")
                return
        elif action == 'cancel':
            cursor.execute('UPDATE transactions SET status = "cancelled" WHERE id = ?', (trans_id,))
            bot.send_message(user_id, "–í–∞—à–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

        conn.commit()
        bot.send_message(call.message.chat.id, f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {trans_id} {'–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞' if action == 'confirm' else '–æ—Ç–º–µ–Ω–µ–Ω–∞'}.")
    else:
        bot.send_message(call.message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    if not os.path.exists('screenshots'):
        os.makedirs('screenshots')
    bot.polling(none_stop=True)
